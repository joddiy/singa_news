<?php

namespace app\components;

use Yii;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\rest\Controller;
use yii\web\Response;
use yii\data\ActiveDataProvider;

/**
 * Class Controller
 * @package app\components
 */
class RestController extends Controller
{
    const SUCCESS = 200;
    const FAILURE = 400;

    const SORT_ORDER = 'ascend';

    public $enableCsrfValidation = false;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        Yii::$app->language = Yii::$app->params['language'];
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['contentNegotiator']['formats'] = [
            'application/json' => Response::FORMAT_JSON
        ];
        unset($behaviors['authenticator']);

        return $behaviors;
    }

    public function formatRestResult($code, $data = array(), $message = null, $redirect = null)
    {
        if(empty($message))
        {
            if($code == self::SUCCESS)
            {
                $message = 'Success';

            }else{

                $message = 'Failure';
            }
        }
        return array(
            'code'=>$code,
            'data'=>$data,
            'message'=>$message,
            'redirect'=>$redirect
        );
    }

    public function formatRestActiveDataProvider($query, $headerField, $dataKey)
    {
        if(is_string($query))
        {
            $modelClass = $query;
            $query = $modelClass::find();

        }else{

            $modelClass = $query->modelClass;
        }
        $header = [];
        foreach($headerField as $fieldKey=>$fieldValue)
        {
            $key = is_int($fieldKey) ? $fieldValue : $fieldKey;
            $header[] = ['dataIndex'=>$key,'title'=>$modelClass::getAttributesLabel($key)];
        }
        $sortField = Common::getQueryParams('sortField',$dataKey);
        $sortOrder = Common::getQueryParams('sortOrder',SORT_DESC) === 'ascend' ? SORT_ASC : SORT_DESC;

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'key'=>$dataKey,
            'pagination' => [
                'pageSize' => Common::getQueryParams('pageSize',10)
            ],
            'sort' => [
                'defaultOrder' => [
                    $sortField => $sortOrder
                ]
            ]
        ]);
        $data = [];
        $index = 0;
        foreach($dataProvider->getModels() as $k=>$item)
        {
            foreach($headerField as $fieldKey=>$fieldValue)
            {
                if(is_int($fieldKey))
                {
                    $key = $fieldValue;
                    $value = $item->$fieldValue;

                }else{

                    $key = $fieldKey;
                    $value = $fieldValue($item,$index);
                }
                $data[$k][$key] = $value;
            }
            $index ++ ;
        }

        return $this->formatRestResult(self::SUCCESS,array(
            'header'=>$header,
            'data'=>$data,
            'pagination'=>array(
                'pageSize'=>$dataProvider->getPagination()->getPageSize(),
                'total'=>$dataProvider->getTotalCount(),
                'current'=>$dataProvider->getPagination()->getPage() + 1
            )
        ));
    }
}